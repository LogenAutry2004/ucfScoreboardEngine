#!/usr/bin/env python

import sys
import requests
from bs4 import BeautifulSoup

if len(sys.argv) != 5:
    print("Usage: python script.py <host> <port> <username> <password>")
    sys.exit(1)

host = sys.argv[1]
port = sys.argv[2]
username = sys.argv[3]
password = sys.argv[4]

base_url = f"http://{host}:{port}"
login_url = f"{base_url}/login?returnurl=%2F"

session = requests.Session()

# GET the homepage to acquire cookies and possibly the anti-forgery token
response = session.get(base_url)
print("GET / status code:", response.status_code)

# Attempt to extract the __RequestVerificationToken from the HTML
soup = BeautifulSoup(response.text, "html.parser")
token_input = soup.find("input", {"name": "__RequestVerificationToken"})
token = token_input.get("value") if token_input else session.cookies.get(".Nop.Antiforgery")

if not token:
    print("Warning: Could not locate the verification token. Login may fail.")

# Prepare payload with credentials and token
payload = {
    "Email": username,
    "Password": password,
    "__RequestVerificationToken": token,
    "RememberMe": "false"
}

# Set headers with Referer as required by some anti-forgery measures
headers = {
    "Referer": f"{base_url}/login?returnUrl=%2F"
}

# POST to login without following redirects
login_response = session.post(login_url, data=payload, headers=headers, allow_redirects=False)
print("POST /login?returnurl=%2F status code:", login_response.status_code)

if login_response.status_code == 302:
    print("Login successful: Received 302 redirect.")
else:
    print("Login failed: Expected 302, got", login_response.status_code)

